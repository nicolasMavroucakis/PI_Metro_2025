/**
 * Script para criar um usu√°rio administrador no DynamoDB
 * 
 * Execute: node scripts/create-admin.js
 */

require('dotenv').config();
const AWS = require('aws-sdk');
const bcrypt = require('bcryptjs');
const readline = require('readline');

// Configurar AWS
AWS.config.update({
  region: process.env.REACT_APP_AWS_REGION || 'sa-east-1',
  accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY
});

const dynamodb = new AWS.DynamoDB.DocumentClient();
const USERS_TABLE = process.env.REACT_APP_USERS_TABLE || 'metro-users';

// Interface para input do usu√°rio
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function createAdminUser() {
  console.log('\n========================================');
  console.log('   Criar Usu√°rio Administrador - WEB');
  console.log('========================================\n');

  try {
    // Solicitar dados do usu√°rio
    const username = await question('Username (admin): ') || 'admin';
    const password = await question('Senha (m√≠nimo 6 caracteres): ');
    const email = await question('Email: ');
    const name = await question('Nome completo (opcional): ') || '';

    // Valida√ß√µes
    if (!password || password.length < 6) {
      console.error('\n‚ùå Senha deve ter no m√≠nimo 6 caracteres!');
      rl.close();
      process.exit(1);
    }

    if (!email) {
      console.error('\n‚ùå Email √© obrigat√≥rio!');
      rl.close();
      process.exit(1);
    }

    // Verificar se usu√°rio j√° existe
    console.log(`\nüîç Verificando se usu√°rio "${username}" j√° existe...`);
    
    const existing = await dynamodb.get({
      TableName: USERS_TABLE,
      Key: { username }
    }).promise();

    if (existing.Item) {
      console.log(`\n‚ö†Ô∏è  Usu√°rio "${username}" j√° existe!`);
      const update = await question('Deseja atualizar para admin? (s/n): ');
      
      if (update.toLowerCase() === 's' || update.toLowerCase() === 'sim') {
        // Atualizar usu√°rio existente
        await dynamodb.update({
          TableName: USERS_TABLE,
          Key: { username },
          UpdateExpression: 'SET isAdmin = :isAdmin, #role = :role, updatedAt = :updatedAt',
          ExpressionAttributeNames: {
            '#role': 'role'
          },
          ExpressionAttributeValues: {
            ':isAdmin': true,
            ':role': 'admin',
            ':updatedAt': new Date().toISOString()
          }
        }).promise();
        
        console.log(`\n‚úÖ Usu√°rio "${username}" atualizado para administrador!`);
        console.log('\nüí° Fa√ßa logout e login novamente no sistema web.');
        console.log('   O menu "Gerenciamento de Usu√°rios" estar√° vis√≠vel.\n');
      } else {
        console.log('\n‚ùå Opera√ß√£o cancelada.');
      }
      
      rl.close();
      return;
    }

    // Hash da senha
    console.log('\nüîê Gerando hash da senha...');
    const hashedPassword = await bcrypt.hash(password, 10);

    // Criar usu√°rio admin
    const adminUser = {
      username,
      password: hashedPassword,
      email,
      name,
      role: 'admin',
      isAdmin: true,
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: null
    };

    console.log('\nüíæ Criando usu√°rio administrador...');
    
    await dynamodb.put({
      TableName: USERS_TABLE,
      Item: adminUser
    }).promise();

    console.log('\n‚úÖ Usu√°rio administrador criado com sucesso!');
    console.log('\nDetalhes:');
    console.log(`   Username: ${username}`);
    console.log(`   Email: ${email}`);
    console.log(`   Nome: ${name || 'N/A'}`);
    console.log(`   Fun√ß√£o: admin`);
    console.log(`   Administrador: Sim`);
    console.log(`   Ativo: Sim`);
    
    console.log('\nüí° Voc√™ pode fazer login no sistema web com essas credenciais.');
    console.log('   O menu "Gerenciamento de Usu√°rios" estar√° vis√≠vel apenas para este usu√°rio.\n');

  } catch (error) {
    console.error('\n‚ùå Erro ao criar usu√°rio:', error.message);
    
    if (error.code === 'ResourceNotFoundException') {
      console.error('\n‚ö†Ô∏è  Tabela "metro-users" n√£o encontrada!');
      console.error('Execute o script de setup do DynamoDB primeiro:');
      console.error('   node scripts/setup-dynamodb.js');
    } else if (error.code === 'UnrecognizedClientException') {
      console.error('\n‚ö†Ô∏è  Credenciais AWS inv√°lidas!');
      console.error('Verifique o arquivo .env');
    }
    
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Executar
createAdminUser();


